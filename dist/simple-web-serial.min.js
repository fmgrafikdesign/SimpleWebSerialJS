!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SimpleWebSerial=t():e.SimpleWebSerial=t()}(globalThis,()=>(()=>{"use strict";var e={};e.d=function(t,r){for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},e.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};e.r(t),e.d(t,{setupSerialConnection:()=>n});function r(e){return"number"==typeof e?e:"string"!=typeof e||isNaN(e)?Array.isArray(e)?e.map(e=>r(e)):"object"==typeof e?Object.keys(e).reduce((t,o)=>({...t,[o]:r(e[o])}),{}):e:parseFloat(e)}let o={baudRate:57600,requestElement:null,requestAccessOnPageLoad:!1,accessText:"To access serial devices, user interaction is required. Please press this button to select the serial device you want to connect to.",accessButtonLabel:"Choose device / port",styleDomElements:!0,transformer:new class e{transform(e,t){try{this.chunks+=e;let r=this.chunks.split("\r\n");this.chunks=r.pop(),r.forEach(e=>t.enqueue(e))}catch(e){console.error(`Transformation Error: ${e}`)}}flush(e){try{e.enqueue(this.chunks)}catch(e){console.error(`Flushing Error: ${e}`)}}constructor(){this.chunks=""}},logIncomingSerialData:!1,logOutgoingSerialData:!1,parseStringsAsNumbers:!0,warnAboutUnregisteredEvents:!0,newLineCharacter:"\n",filters:[]},n=function(e){if(!navigator.serial)throw Error("The Serial API not supported in your browser. Make sure you've enabled flags if necessary!");"number"==typeof e?e={...o,baudRate:e}:void 0===e?e=o:"object"==typeof e&&(e={...o,...e}),null!=e.requestElement&&(e={...e,requestAccessOnPageLoad:!1});let t=e,n=function(e){let t=null,o=null,n=null,a=null,i={};function s(e){if("string"==typeof e){let t=document.getElementById(e);if(!t)throw Error("Could not find element with ID '"+e+"'.");e=t}e.addEventListener("click",l)}async function l(){if(u())throw Error("Serial connection has already been established.");try{t=await navigator.serial.requestPort({filters:e.filters}),await t.open({baudRate:e.baudRate})}catch(e){var r;throw r="There was an error trying to open a serial connection. Please make sure the port is not occupied in another tab or process. Error message:<br>"+e,!a||(a.innerHTML=r),Error(e)}e.requestAccessOnPageLoad&&(null==n||n.remove());let i=new TextEncoderStream;o=i.writable.getWriter();let s=new TextDecoderStream;i.readable.pipeTo(t.writable),t.readable.pipeTo(s.writable),b(s.readable.pipeThrough(new TransformStream(e.transformer)).getReader()).then(e=>{console.log(e,"readLoop done")}).catch(t=>{console.error("Could not read serial data. Please make sure the same baud rate is used on device (Serial.begin()) and library. Library currently uses baud rate",e.baudRate,"Please also make sure you're not sending too much serial data. Consider using (a higher) delay() to throttle the amount of data sent."),console.error(t)})}function u(){return(null==t?void 0:t.readable)&&(null==t?void 0:t.writable)}async function c(n,a){if(!(null==t?void 0:t.writable))return;if(void 0===a)return e.logOutgoingSerialData&&console.log(n),e.parseStringsAsNumbers&&(n=r(n)),f(n);e.parseStringsAsNumbers&&(a=r(a));let i=JSON.stringify([n,a]);return e.logOutgoingSerialData&&console.log(i),o.write(i+e.newLineCharacter)}async function d(e){return c("_e",e)}async function f(e){return c("_d",e)}function p(t,r){if(e.warnAboutUnregisteredEvents&&!i[t])return console.warn("Event "+t+" has been received, but it has never been registered as listener.");i[t].forEach(e=>e(r))}async function b(t){for(;;){let{value:r,done:o}=await t.read();if(r){let t=null;try{t=JSON.parse(r)}catch{}if(t){if(e.logIncomingSerialData&&console.log(t),"object"==typeof t){if("_w"===t[0]){console.warn("[ARDUINO] "+t[1]);continue}if("_l"===t[0]){console.log("[ARDUINO] "+t[1]);continue}if("_e"===t[0]){console.error("[ARDUINO] "+t[1]);continue}if("_d"===t[0]){p("data",t[1]);continue}p(t[0],t[1])}else"string"==typeof t&&p(t,null)}else e.logIncomingSerialData&&console.log(r)}if(o){console.log("[readLoop] DONE",o),t.releaseLock();break}}}return{createModal:function(){let[t,r,o,i,l,u,c]=["div","div","div","div","p","p","button"].map(e=>document.createElement(e));return o.classList.add("SimpleWebSerial-modal-container"),r.classList.add("SimpleWebSerial-modal-overlay"),i.classList.add("SimpleWebSerial-modal-inner"),e.styleDomElements&&(t.setAttribute("style","position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000"),r.setAttribute("style","background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer"),o.setAttribute("style","position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box;"),i.setAttribute("style","background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);"),l.setAttribute("style","color: #000"),u.setAttribute("style","color: #dd0000")),l.innerText=e.accessText,c.innerText=e.accessButtonLabel,s(c),i.append(l,u,c),o.append(i),t.append(r,o),n=t,a=u,document.body.append(t),t},emit:p,modalElement:n,on:function(e,t){return!i[e]&&(i[e]=[]),i[e].push(t),[e,t]},port:t,ready:u,readable:function(){return null==t?void 0:t.readable},removeListener:function(e,t){if("object"==typeof e&&void 0===t&&(t=e[1],e=e[0]),!i[e])throw Error("There is no listener named "+e+".");let r=i[e].length;return i[e]=i[e].filter(e=>e!==t),r!==i[e].length},removeListeners:function(e){if("string"!=typeof e)throw Error("removeListeners expects a string as parameter, which will be used to remove all listeners of that event.");let t=i[e].length;return i[e]=[],t>0},requestSerialAccessOnClick:s,send:c,sendData:f,sendEvent:d,startConnection:l,writable:function(){return null==t?void 0:t.writable},writer:o}}(t);return t.requestElement&&n.requestSerialAccessOnClick(t.requestElement),t.requestAccessOnPageLoad&&window.addEventListener("load",n.createModal),n};return t})());
//# sourceMappingURL=simple-web-serial.min.js.map
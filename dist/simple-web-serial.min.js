!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SimpleWebSerial=t():e.SimpleWebSerial=t()}(globalThis,()=>(()=>{"use strict";var e={};e.d=function(t,r){for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},e.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};function r(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}e.r(t),e.d(t,{LineBreakTransformer:()=>o,setupSerialConnection:()=>l,DEFAULT_BAUDRATE:()=>i});let i=57600;class o{transform(e,t){try{this.chunks+=e;let r=this.chunks.split(this.delimiter);for(let e of(this.chunks=r.pop()||"",r))t.enqueue(e)}catch(t){console.error(`Transformation Error: ${t} @chunk: ${e}`)}}flush(e){try{this.chunks&&e.enqueue(this.chunks)}catch(e){console.error(`Flushing Error: ${e}`)}}constructor(e="\r\n"){r(this,"chunks",void 0),r(this,"delimiter",void 0),this.chunks="",this.delimiter=e}}function n(e){if("number"==typeof e)return e;if("string"==typeof e&&!Number.isNaN(+e)&&""!==e.trim())return parseFloat(e);if(Array.isArray(e))return e.map(e=>n(e));if("object"==typeof e&&null!==e){let t={};for(let r in e)t[r]=n(e[r]);return t}return e}function s(){return{baudRate:i,requestElement:null,requestAccessOnPageLoad:!1,accessText:"To access serial devices, user interaction is required. Please press this button to select the serial device you want to connect to.",accessButtonLabel:"Choose device / port",styleDomElements:!0,transformer:new o,logIncomingSerialData:!1,logOutgoingSerialData:!1,parseStringsAsNumbers:!0,warnAboutUnregisteredEvents:!0,newLineCharacter:"\n",filters:[]}}class a{requestSerialAccessOnClick(e){if("string"==typeof e){let t=document.getElementById(e);if(!t)throw Error(`Could not find element with ID '${e}'.`);e=t}e.addEventListener("click",this.startConnection)}createModal(){let[e,t,r,i,o,n,s]=["div","div","div","div","p","p","button"].map(e=>document.createElement(e));r.classList.add("SimpleWebSerial-modal-container"),t.classList.add("SimpleWebSerial-modal-overlay"),i.classList.add("SimpleWebSerial-modal-inner"),this.configuration.styleDomElements&&(e.setAttribute("style","position: fixed; left: 0; top: 0; width: 100%; height: 100%; z-index: 10000"),t.setAttribute("style","background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; cursor: pointer"),r.setAttribute("style","position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box;"),i.setAttribute("style","background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);"),o.setAttribute("style","color: #000"),n.setAttribute("style","color: #dd0000")),o.innerText=this.configuration.accessText,s.innerText=this.configuration.accessButtonLabel,this.requestSerialAccessOnClick(s),i.append(o,n,s),r.append(i),e.append(t,r),this._modalElement=e,this._modalErrorElement=n,document.body.append(e)}showErrorMessageInModal(e){this._modalErrorElement&&(this._modalErrorElement.innerHTML=e)}removeModal(){var e;null===(e=this._modalElement)||void 0===e||e.remove()}async startConnection(){if(this.ready())throw Error("Serial connection has already been established.");try{this.port=await navigator.serial.requestPort({filters:this.configuration.filters}),await this.port.open({baudRate:this.configuration.baudRate})}catch(e){throw this.showErrorMessageInModal("There was an error trying to open a serial connection. Please make sure the port is not occupied in another tab or process. Error message:<br>"+e),e}this.configuration.requestAccessOnPageLoad&&this.removeModal();let e=new TextEncoderStream;this.writer=e.writable.getWriter();let t=new TextDecoderStream;e.readable.pipeTo(this.port.writable),this.port.readable.pipeTo(t.writable);let r=t.readable.pipeThrough(new TransformStream(this.configuration.transformer)).getReader();this.readLoop(r).catch(e=>{console.error("Could not read serial data. Please make sure the same baud rate is used on device (Serial.begin()) and library. Library currently uses baud rate",this.configuration.baudRate,"Please also make sure you're not sending too much serial data. Consider using (a higher) delay() to throttle the amount of data sent."),console.error(e)})}on(e,t){return!this._listeners[e]&&(this._listeners[e]=[]),this._listeners[e].push(t),[e,t]}removeListener(e,t){let r;if(Array.isArray(e)&&void 0===t)[r,t]=e;else if("string"==typeof e&&void 0!==t)r=e;else throw Error("Invalid arguments for removeListener.");if(!this._listeners[r])throw Error("There is no listener named "+r+".");let i=this._listeners[r].length;return this._listeners[r]=this._listeners[r].filter(e=>e!==t),i!==this._listeners[r].length}removeListeners(e){var t;if("string"!=typeof e)throw Error("removeListeners expects a string as parameter, which will be used to remove all listeners of that event.");let r=(null===(t=this._listeners[e])||void 0===t?void 0:t.length)||0;return this._listeners[e]=[],r>0}ready(){var e,t;return!!((null===(e=this.port)||void 0===e?void 0:e.readable)&&(null===(t=this.port)||void 0===t?void 0:t.writable))}readable(){var e;return(null===(e=this.port)||void 0===e?void 0:e.readable)||null}writable(){var e;return(null===(e=this.port)||void 0===e?void 0:e.writable)||null}async send(e,t){var r;let i;if(!(null===(r=this.port)||void 0===r?void 0:r.writable)||!this.writer)return;void 0===t?(this.configuration.logOutgoingSerialData&&console.log(e),this.configuration.parseStringsAsNumbers&&(e=n(e)),i=["_d",e]):(this.configuration.parseStringsAsNumbers&&(t=n(t)),i=[e,t]);let o=JSON.stringify(i);this.configuration.logOutgoingSerialData&&console.log(o),await this.writer.write(o+this.configuration.newLineCharacter)}async sendEvent(e){await this.send("_e",e)}async sendData(e){await this.send("_d",e)}emit(e,t){this._listeners[e]?this._listeners[e].forEach(e=>e(t)):this.configuration.warnAboutUnregisteredEvents&&console.warn("Event "+e+" has been received, but it has never been registered as listener.")}async readLoop(e){for(;;){let{value:t,done:r}=await e.read();if(t){let e=null;try{e=JSON.parse(t)}catch(e){this.configuration.logIncomingSerialData&&console.warn("Failed to parse serial data:",t,"| Reported error:",e)}if(e){if(this.configuration.logIncomingSerialData&&console.log(e),Array.isArray(e))switch(e[0]){case"_w":console.warn("[ARDUINO] "+e[1]);continue;case"_l":console.log("[ARDUINO] "+e[1]);continue;case"_e":console.error("[ARDUINO] "+e[1]);continue;case"_d":this.emit("data",e[1]);continue;default:this.emit(e[0],e[1]);continue}else"string"==typeof e&&this.emit(e,null)}else this.configuration.logIncomingSerialData&&console.log(t)}if(r){console.log("[readLoop] DONE",r),e.releaseLock();break}}}getPort(){return this.port}getWriter(){return this.writer}setWriter(e){return this.writer=e,this.writer}get modalElement(){return this._modalElement}constructor(e){r(this,"port",null),r(this,"writer",null),r(this,"_modalElement",null),r(this,"_modalErrorElement",null),r(this,"_listeners",{}),r(this,"configuration",void 0),this.configuration=e,this.startConnection=this.startConnection.bind(this),this.createModal=this.createModal.bind(this)}}function l(e){let t;if(!navigator.serial)throw Error("The Serial API is not supported in your browser. Make sure you've enabled flags if necessary!");if("number"==typeof e)t={...s(),baudRate:e};else if(void 0===e)t=s();else if("object"==typeof e)t={...s(),...e};else throw Error("Invalid arguments for setupSerialConnection.");null!=t.requestElement&&(t={...t,requestAccessOnPageLoad:!1});let r=new a(t);return t.requestElement&&r.requestSerialAccessOnClick(t.requestElement),t.requestAccessOnPageLoad&&window.addEventListener("load",r.createModal),r}return t})());
//# sourceMappingURL=simple-web-serial.min.js.map